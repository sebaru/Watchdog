ASxxxx Assembler V01.70 + NoICE + SDCC mods + Flat24 Feb-1999  (Intel 8051), page 1.



                              1 ;-----------------------------------------------------------------------------------------------------------
                              2 ; rs232.asm    Envoi et reception des trames rs232/485
                              3 ; Sébastien Lefevre                                                            mar 08 jun 2004 12:49:36 CEST 
                              4 ;-----------------------------------------------------------------------------------------------------------
                              5         .module  Rs232
ASxxxx Assembler V01.70 + NoICE + SDCC mods + Flat24 Feb-1999  (Intel 8051), page 2.



                              6 	.include "cst.asm"
                              1 ;-----------------------------------------------------------------------------------------------------------
                              2 ; cst.asm    Definition des constantes prgs
                              3 ; Sébastien Lefevre                                                            mar 08 jun 2004 12:49:36 CEST 
                              4 ;-----------------------------------------------------------------------------------------------------------
                              5 
ASxxxx Assembler V01.70 + NoICE + SDCC mods + Flat24 Feb-1999  (Intel 8051), page 3.



                              6         .include "conf.asm"                                                       ; Inclusion des constantes 
                    0001      1 ID_ESCLAVE = 1
                    0008      2 NBR_ENTRE_ANA = 8
                    0014      3 NBR_ENTRE_TOR = 20
                    0000      4 NBR_ENTRE_CHOC = 0
                    0000      5 NBR_SORTIE_TOR = 0
                    0000      6 NBR_SORTIE_ANA = 0
ASxxxx Assembler V01.70 + NoICE + SDCC mods + Flat24 Feb-1999  (Intel 8051), page 4.



                              7 ;----------------------------------------Déclarations des prototypes de fonctions --------------------------
                              8         .globl _start                                                                        ; dans init.asm
                              9         .globl TRAME_RECUE
                             10         .globl RX_BUF
                             11         .globl TX_BUF
                             12         .globl INPUT_BUF
                             13         .globl ENTRE_ANA_BUF
                             14         .globl ID_IDENT
                             15         .globl NBR_INT_CAN
                             16 
                             17         .globl _envoyer_rs232                                                               ; dans rs232.asm
                             18         .globl _recu_rs232
                             19         .globl _rs232_purge_trame
                             20 
                             21         .globl _clignotant_run                                                         ; Dans cligno_run.asm
                             22         .globl _del_trame_on
                             23         .globl _del_trame_off
                             24         .globl _cdg_logiciel
                             25         .globl _init_cdg_logiciel
                             26 
                             27         .globl _calcul_crc16                                                                ; dans crc16.asm
                             28 
                             29         .globl _start_of_conversion                                                           ; dans can.asm
                             30         .globl _recu_can
                             31 	.globl _lance_start_of_conversion
                             32         .globl CAN_PRET
                             33 
                             34         .globl _fct_entre_ana                                                       ; dans fct_entre_ana.asm
                             35 
                             36         .globl _fct_entre_tor                                                       ; dans fct_entre_tor.asm
                             37         .globl _raz_sortie_tor
                             38         .globl _polling_entre_tor
                             39 
                             40         .globl _fct_ident                                                               ; dans fct_ident.asm
                             41 
                             42         .globl _fct_sortie_tor                                                     ; dans fct_sortie_tor.asm
                             43 
                             44 ;---------------------------------------- Constantes communes à tous ---------------------------------------
                    00FF     45 	ID_MAITRE         = 0xFF
                    0003     46 	VERSION_MAJOR     = 0x03
                    0001     47 	VERSION_MINOR     = 0x01
                    0018     48 	TAILLE_BUF        = 24
                    0006     49 	TAILLE_ENTETE     = 6
                    00C0     50 	P4                = 0xC0
                    00C0     51 	P4.0              = 0xC0
                    00C1     52 	P4.1              = 0xC1
                    00C2     53 	P4.2              = 0xC2
                    00C3     54 	P4.3              = 0xC3
                    00C4     55 	P4.4              = 0xC4
                    00C5     56 	P4.5              = 0xC5
                    00C6     57 	P4.6              = 0xC6
                    00C7     58 	P4.7              = 0xC7
                             59 
                    00C4     60 	P5                = 0xC4     ; P5 c'est pas D0 ->>>> a voir !!
                    00FF     61 	T3                = 0xFF
                    00C5     62 	ADCON             = 0xC5
ASxxxx Assembler V01.70 + NoICE + SDCC mods + Flat24 Feb-1999  (Intel 8051), page 5.



                    00C6     63 	ADCH              = 0xC6
                    00C8     64 	ADCS              = 0xC8
                    00C9     65 	ADCI              = 0xC9
                    00CC     66 	ADC1              = 0xCC
                    00CB     67 	ADC0              = 0xCB
                    00A8     68         IEN0              = 0xA8
                    0003     69 	IndexTrame_taille = 3
                             70 
                    0001     71 	FCT_IDENT         = 0x01
                    0002     72 	FCT_ENTRE_TOR     = 0x02
                    0003     73 	FCT_ENTRE_ANA     = 0x03
                    0004     74 	FCT_SORTIE_TOR    = 0x04
                    00F0     75 	DEBUG_PRENDRE_LIGNE = 0xF0
                    00F1     76 	DEBUG_LIBERE_LIGNE= 0xF1
                    00FF     77 	FCT_PING          = 0xFF
                             78 
                    0000     79 	BANK0             = 0x00
                    0008     80 	BANK1             = 0x08
                    0010     81 	BANK2             = 0x10
                    0018     82 	BANK3             = 0x18
                             83 ;-----------------------------------------------------------------------------------------------------------
ASxxxx Assembler V01.70 + NoICE + SDCC mods + Flat24 Feb-1999  (Intel 8051), page 6.



                              7 ;-----------------------------------------------------------------------------------------------------------
                              8 ; _recu_rs232: appelé par interruption
                              9 ;-----------------------------------------------------------------------------------------------------------
                             10 	.area CSEG	(CODE)
   016F                      11 _recu_rs232:
   016F C0 D0                12         push PSW                ; ranger le registre
   0171 C0 E0                13         push ACC
   0173 E5 30                14 	mov A,TRAME_RECUE       ; trame precedente traitée ??
   0175 70 25                15 	jnz  _recu_rs232_fin    ; si non, fin
   0177 75 8C 00             16         mov  TH0,#0x00
   017A 75 8A 01             17         mov  TL0,#0x01                  ; Reset Timer 0 Watchdog maitre
   017D 75 D0 18             18         mov  PSW,#BANK3          ; activer la banque de registres 3
   0180 C2 98                19         clr  RI
   0182 A6 99                20         mov  @R0,SBUF               ; si RI=1 placer le caractÃ©re
   0184 08                   21         inc  R0                     ; mise à jour du pointeur
   0185 0A                   22         inc  R2
   0186 74 80                23         mov  A,#RX_BUF              ; debut du tampon
   0188 24 03                24 	add  A,#IndexTrame_taille   ; zone TAILLE
   018A F9                   25 	mov  R1,A                   ; copie dans le registre
   018B E7                   26 	mov  A,@R1                  ; recupération de la taille à lire
   018C B4 18 12             27 	cjne A,#TAILLE_BUF,_recu_rs232_diff
   018F                      28 _recu_rs232_continue:               ; on arrive la si taille <= TAILLE_BUF
   018F 24 06                29         add  A,#TAILLE_ENTETE       ; additionne la taille entete
   0191 C3                   30         clr  C
   0192 9A                   31         subb A,R2
   0193 70 07                32         jnz  _recu_rs232_fin        ; compare: si egalité, alors on a tout lu
   0195 75 30 01             33         mov  TRAME_RECUE, #0x01     ; on valide la trame
   0198                      34 _recu_rs232_reset_trame:        
   0198 78 80                35         mov R0,#RX_BUF              ; on reset les registres pour la prochaine trame
   019A 7A 00                36         mov R2,#0x0                 ; Nombre de caracteres Ã  recevoir
   019C                      37 _recu_rs232_fin:
   019C D0 E0                38         pop  ACC                    ;
   019E D0 D0                39         pop  PSW                    ; réactive la banque registres 0  
   01A0 22                   40         ret
   01A1                      41 _recu_rs232_diff:
   01A1 40 EC                42         jc   _recu_rs232_continue   ; si taille <= TAILLE_BUF, on continue
   01A3 80 F3                43         sjmp _recu_rs232_reset_trame; sinon, taille > TAILLE_BUF -> drop trame
                             44 ;-----------------------------------------------------------------------------------------------------------
                             45 ; Envoi de la trame TXBUF sur la liaison RS232
                             46 ;-----------------------------------------------------------------------------------------------------------
   01A5                      47 _envoyer_rs232:
   01A5 12 03 E8             48         lcall _del_trame_on             ; prend la main sur la ligne RS485
   01A8 78 9E                49 	mov R0,#TX_BUF              ; on pointe au debut de la trame
   01AA 12 01 E8             50 	lcall _calcul_crc16         ; on calcul le CRC16
   01AD EC                   51 	mov A,R4
   01AE F6                   52 	mov @R0,A                   ; recopie poids fort CRC16
   01AF 08                   53 	inc R0
   01B0 ED                   54 	mov A,R5
   01B1 F6                   55 	mov @R0,A                   ; recopie poids faible CRC16
                             56 
   01B2 74 9E                57 	mov  A,#TX_BUF
   01B4 24 03                58 	add  A,#IndexTrame_taille
   01B6 F9                   59 	mov  R1,A
   01B7 E7                   60 	mov  A,@R1                  ; recuperation de la taille à envoyer
   01B8 24 06                61 	add  A,#TAILLE_ENTETE
   01BA FA                   62 	mov  R2,A                   ; R3 = nombre total d'octets a envoyer
ASxxxx Assembler V01.70 + NoICE + SDCC mods + Flat24 Feb-1999  (Intel 8051), page 7.



   01BB 78 9E                63 	mov R0,#TX_BUF              ; debut du buffer
   01BD                      64 _envoi_encore:
   01BD 30 99 FD             65 	jnb  TI,_envoi_encore       ; attente que la ligne se libere
   01C0 C2 99                66 	clr  TI                     ; oki, on valide l'envoi
   01C2 86 99                67         mov  SBUF,@R0               ; on balance
   01C4 08                   68 	inc  R0                     ; caractere suivant
   01C5 DA F6                69 	djnz R2,_envoi_encore       ; saut si pas fini
   01C7                      70 _dernier_bit:
   01C7 30 99 FD             71 	jnb  TI,_dernier_bit        ; attente que le dernier bit soit envoyé
   01CA 12 03 EB             72 	lcall _del_trame_off
   01CD 22                   73 	ret
                             74 ;-----------------------------------------------------------------------------------------------------------
                             75 ; Purge de la trame de reception
                             76 ;-----------------------------------------------------------------------------------------------------------
   01CE                      77 _rs232_purge_trame:
   01CE C0 D0                78         push PSW                    ; ranger le registre
   01D0 C0 E0                79         push ACC
   01D2 75 D0 18             80         mov  PSW,#BANK3             ; activer la banque de registres 3
   01D5 74 06                81 	mov A,#TAILLE_ENTETE
   01D7 24 18                82 	add A,#TAILLE_BUF
   01D9 FA                   83 	mov R2,A
   01DA                      84 _rs232_purge_trame_encore:
   01DA 76 00                85         mov @R0,#0x00
   01DC 08                   86         inc R0
   01DD DA FB                87         djnz R2, _rs232_purge_trame_encore	
   01DF 78 80                88         mov  R0,#RX_BUF             ; on reset les registres pour la prochaine trame
   01E1 7A 00                89         mov  R2,#0x0                ; Nombre de caracteres à recevoir
   01E3 D0 E0                90         pop  ACC
   01E5 D0 D0                91         pop  PSW                    ; réactive la banque registres 0  
   01E7 22                   92         ret
                             93 ;-----------------------------------------------------------------------------------------------------------
                             94 
